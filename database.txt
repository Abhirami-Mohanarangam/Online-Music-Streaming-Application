--------------------------------------------------------- LOGIN ad SIGN UP -----------------------------------------------------------------------
create table users(
    user_id integer not null auto_increment primary key,
    user_name char(100),
    user_mail_id char(100),
    password char(100),
    create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
alter table users auto_increment = 1;

--------------------------- Procedures --------------------------
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getDetails`(in name char(100))
BEGIN 
	select * from users where user_name = name;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sign_up`(in name char(100),in email char(100),in pass char(100))
BEGIN 
	insert into users(user_name,user_mail_id,password) values(name,email,pass);
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `login`(in name char(100),in pass char(100))
BEGIN
	select * from users where user_name = name and password = pass;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateDetails`(in username char(100),in pwd char(100))
BEGIN
	update users set password = pwd where user_name = username;
end$$
DELIMITER ;

------------------------------------------------------ SONGS, ALBUMS, and ARTISTS ----------------------------------------------------------

create table albums(
	id integer not null primary key auto_increment,
	name char(100) not null,
	img_path char(100) not null 
);
alter table albums auto_increment = 1;

insert into albums(name,img_path) VALUES
	('3','3.jpg'),
    ('10 Enrathukulla','10-enradhukulla.jpg'),
    ('Aakko','aakko.jpg'),
    ('Aalavandhan','aalavandhan.jpg'),
    ('Aambala','aambala.jpg'),
    ('Aarambam','aarambam.jpg'),
    ('Adhavan','adhavan.jpg'),
    ('Ashiqui-2','Ashiqui-2.jpg'),
    ('English','english.jpg');
create table songs(
    id integer not null primary key auto_increment,
    name char(100) not null,
    path char(100) not null,
    album integer not null,
   FOREIGN KEY(album) REFERENCES albums(id),
    img_path char(100) not null,
    count integer not null
);
alter table songs auto_increment = 1;

insert into songs (name,path,album,img_path,count) VALUES
	('Idhazhin Oram','Idhazhin Oram.mp3',1,'3.jpg',13),
    ('Kannazhaga','Kannazhaga.mp3',1,'3.jpg',17),
    ('Nee Paartha Vizhigal','Nee Paartha Vizhigal.mp3',1,'3.jpg',20),
    ('Poo Nee po','Poo Nee po.mp3',1,'3.jpg',22),
    ('Pathu Endradhukkulla(Male)','Pathu_Endradhukkulla_(Male).mp3',2,'10-enradhukulla.jpg',15),
    ('Vroom Vroom','Vroom_Vroom.mp3',2,'10-enradhukulla.jpg',17),
    ('Hasili Fisiliye','Hasili Fisiliye.mp3',8,'adhavan.jpg',18),
    ('Enakenna Yaarum Illaye','Enakenna_Yaarum_Illaye.mp3',3,'aakko.jpg',24),
    ('Kadavul Paathi','Kadavul Paathi.mp3',4,'aalavandhan.jpg',19),
    ('Inbum Pongum Vennila','Inbum_Pongum_Vennila.mp3',5,'aambala.jpg',15),
    ('Stylish Thamizhachi','Stylish Thamizhachi.mp3',7,'aarambam.jpg',12),
    ('Adadada Arrambame','Adadada Arrambame.mp3',7,'aarambam.jpg',11),
    ('Tum Hi Ho','Tum Hi Ho.mp3',9,'Ashiqui-2.jpg',18),
    ('Darkside ','Alan Walker - Darkside (feat. Au Ra and Tomine Harket).mp3',10,'english.jpg',20),
    ('Faded','Alan Walker - Faded.mp3',10,'english.jpg',27),
    ('Sing Me To Sleep','Alan Walker - Sing Me To Sleep.mp3',10,'english.jpg',20),
    ('The Spectre','Alan Walker - The Spectre.mp3',10,'english.jpg',26),
    ('Falling Away','Amber Pacific - Falling Away.mp3',10,'english.jpg',21),
    ('All the good girls go to hell','Billie Eilish - all the good girls go to hell.mp3',10,'english.jpg',11),
    ('Bury a friend','Billie Eilish - bury a friend.mp3',10,'english.jpg',19),
    ('No Time To Die','Billie Eilish - No Time To Die (Audio).mp3',10,'english.jpg',14),
    ('When the party is over','Billie Eilish - when the party s over.mp3',10,'english.jpg',17),
    ('Xanny','Billie Eilish - xanny.mp3',10,'english.jpg',21),
    ('Ashes (from Deadpool 2)','Céline Dion - Ashes (from Deadpool 2).mp3',10,'english.jpg',23),
    ('Its All Coming Back To Me Now','Céline Dion - It s All Coming Back To Me Now.mp3',10,'english.jpg',26),
    ('My Heart Will Go On','Celine Dion - My Heart Will Go On.mp3',10,'english.jpg',33),
    ('That s The Way It Is','Céline Dion - That s The Way It Is.mp3',10,'english.jpg',14),
    ('The Power Of Love','Céline Dion - The Power Of Love (Official Video).mp3',10,'english.jpg',22),
    ('Love Myself','Hailee Steinfeld - Love Myself.mp3',10,'english.jpg',17),
    ('Most Girls','Hailee Steinfeld - Most Girls.mp3',10,'english.jpg',10),
    ('Wrong Direction','Hailee Steinfeld - Wrong Direction.mp3',10,'english.jpg',19),
    ('Capital Letters','Hailee Steinfeld, BloodPop® - Capital Letters.mp3',10,'english.jpg',35),
    ('Starving ft. Zedd','Hailee Steinfeld, Grey - Starving ft. Zedd.mp3',10,'english.jpg',36);

create table artists(
	id integer not null primary key auto_increment,
	name char(100) not null,
	img_path char(100) not null 
);
alter table artists auto_increment = 1;
insert into artists(name,img_path) VALUES
	('Aadhi','aadhi.jpg'),
    ('Alan Walker','alan_walker.jpg'),
    ('Anirudh Ravichander','anirudh_ravichander.jpg'),
    ('Arjit Singh','arjit_singh.jpg'),
    ('Billie Eilish','billie_eilish.jpg'),
    ('Bloodpop','bloodpop.jpg'),
    ('Céline Dion','Céline_Dion.jpg'),
    ('Dhanush','dhanush.jpg'),
    ('Emcee Jesz','emcee_jesz.jpg'),
    ('Hailee Steinfeld','Hailee_Steinfeld.jpg'),
    ('Harris Jayaraj','harris_jayaraj.jpg'),
    ('Kamal Hassan','kamal_hassan.jpg'),
    ('Santhosh Hariharan','santhosh_hariharan.jpg'),
    ('Vishal Dadlani','vishal_dadlani.jpg'),
    ('Yuvan Shankar Raja','yuvan.jpg');
create table artists_albums(
    artist_id integer not null,
    FOREIGN KEY(artist_id) references artists(id),
    album_id int not null,
    FOREIGN key(album_id) references albums(id)
);
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('1', '5');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('2', '9');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('3', '3');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('4', '8');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('5', '9');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('6', '9');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('7', '9');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('8', '1');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('9', '2');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('10', '9');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('11', '7');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('12', '4');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('13', '2');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('14', '2');
INSERT INTO `artists_albums` (`artist_id`, `album_id`) VALUES ('15', '6');

create table artists_songs(
    artist_id integer not null,
    FOREIGN KEY(artist_id) references artists(id),
    song_id int not null,
    FOREIGN key(song_id) references songs(id)
);
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('1', '10');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('2', '14');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('2', '15');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('2', '16');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('2', '17');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('2', '18');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('3', '8');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('4', '13');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('5', '19');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('5', '20');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('5', '21');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('5', '22');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('5', '23');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('6', '32');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('7', '24');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('7', '25');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('7', '26');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('7', '27');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('7', '28');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('8', '1');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('8', '2');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('8', '3');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('8', '4');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('9', '5');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('10', '29');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('10', '30');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('10', '31');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('10', '32');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('10', '33');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('11', '7');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('12', '9'); 
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('13', '6');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('14', '5');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('15', '12');
INSERT INTO `artists_songs` (`artist_id`, `song_id`) VALUES ('15', '11');

create table playlist(
    id integer not null primary key auto_increment,
    name char(100) not null,
    user_id integer not null,
    foreign key(user_id) references users(user_id)
);

create table playlist_songs(
    playlist_id integer not null,
    FOREIGN KEY(playlist_id) REFERENCES playlist(id) on delete cascade,
    song_id integer not null,
    FOREIGN key(song_id) REFERENCES songs(id)
);

CREATE TABLE IF NOT EXISTS `feedback` (
`id` int(100) NOT NULL primary key auto_increment,
  `name` varchar(100) NOT NULL,
  `email` varchar(50) NOT NULL,
  `address` varchar(150) NOT NULL,
  `message` varchar(250) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0'
);
-------------------------- Procedures -----------------------------------------

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `displayAlbums`()
BEGIN
	select * from albums;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getAlbumSongs`(in album_id integer)
BEGIN
	select * from songs where album = album_id order by count desc;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSelectedAlbum`(in id int)
BEGIN
	SELECT * from albums where albums.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `displayArtists`()
BEGIN
	select * from artists;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getArtistSongs`(in id integer)
BEGIN
	select * from songs where id in (select song_id from artists_songs where artist_id = id) order by count desc;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSelectedArtist`(in id int)
BEGIN
	SELECT * from artists where artist.id= id;
end$$

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateSongCount`(in id int)
BEGIN
	update songs set count = count + 1 where songs.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSong`(in id int)
BEGIN
	select * from songs where songs.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getTop10Songs`()
BEGIN
	select * from songs order by count desc limit 0,10;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `createPlaylist`(in playlist_name char(100), in username char(100))
BEGIN
declare user_id integer;
select users.user_id into user_id from users where user_name = username;
insert into playlist(name,user_id) values (playlist_name,user_id);
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getPlaylistSongs`(in id integer)
BEGIN
	select * from songs where songs.id in (select song_id from playlist_songs where playlist_id = id) order by count desc;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `insertSongToPlaylist`(in pid integer,in sid integer)
BEGIN
	insert into playlist_songs values (pid,sid);
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deletePlaylist`(in pid integer)
BEGIN
	delete from playlist where id = pid;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteSongFromPlaylist`(in pid integer,in sid integer)
BEGIN
	delete from playlist_songs where playlist_id = pid and song_id = sid;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `displayPlaylist`(in name char(100))
BEGIN
	select * from playlist where user_id = (select user_id from users where user_name = name);
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `submitFeedback`(in name varchar(100),in email varchar(50),in subject varchar(150),in messsage varchar(250))
BEGIN
	insert into feedback(name,email,subject,message) values (name,email,subject,message);
end$$
DELIMITER ;


--------------------------------------------------------- ADMIN ---------------------------------------------------------

CREATE TABLE IF NOT EXISTS `admin` (
`user_id` int(100) NOT NULL primary key AUTO_INCREMENT,
  `name` varchar(60) NOT NULL,
  `username` varchar(30) NOT NULL,
  `password` varchar(30) NOT NULL
);

---------------------- Procedures --------------------------

INSERT INTO `admin` (`user_id`, `name`, `username`, `password`) VALUES
(1, 'Abhirami Mohanarangam', 'abhi', 'abhi');

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `adminLogin`(in name varchar(30),in pwd varchar(30))
BEGIN
	select * from admin where username = name and password = pwd;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addAdmin`(in name varchar(60),in uname varchar(30),in pass varchar(30))
BEGIN
	insert into admin(name,username,password) values (name,uname,pass);
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateAdmin`(in id int(100),in name varchar(60),in username varchar(30),in password varchar(30))
BEGIN
	UPDATE admin SET admin.name= name,
					  admin.username=username,
					  admin.password= password WHERE user_id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSelectedAdmin`(in id int)
BEGIN
	select * from admin where admin.user_id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteAdmin`(in id int(100))
BEGIN
	DELETE FROM admin WHERE user_id = id;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getFeedbacks`(in eu integer,in lim integer)
BEGIN
	select * from feedback limit eu,lim;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSelectedFeedback`(in id int(100))
BEGIN
	SELECT name,email,message FROM feedback WHERE feedback.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteFeedback`(in id int(100))
BEGIN
	DELETE FROM feedback WHERE feedback.id = id;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `checkAlbum`(in name char(100))
BEGIN
	select * from albums where albums.name = name;
    
end$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `checkArtist`(in name char(100))
BEGIN
	select * from artists where artists.name = name;
    
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addAlbum`(in album_name char(100),in path char(100))
BEGIN
	insert into albums(name,img_path) values (album_name,path);
	select * from albums where name = album_name;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addArtist`(in artist_name char(100),in path char(100))
BEGIN
	insert into artists(name,img_path) values (artist_name,path);
    select * from artists where name = artist_name;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateSong`(in id integer ,in name char(100),in path char(100),in album integer,in img_path char(100),in count integer)
BEGIN
	UPDATE songs SET songs.name = name,
					  songs.path = path,
					  songs.album= album, 
                      songs.img_path = img_path,
			songs.count = count WHERE songs.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteSong`(in id int(100))
BEGIN
	DELETE FROM songs WHERE songs.id = id;
    
end$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateAlbum`(in id integer,in name char(100),in img_path char(100))
BEGIN
	UPDATE albums SET albums.name= name,
					  albums.img_path=img_path WHERE albums.id = id;
end$$
DELIMITER ;


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateArtist`(in id integer,in name char(100),in img_path char(100))
BEGIN
	UPDATE artists SET artists.name= name,
					  artists.img_path=img_path WHERE artists.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteAlbum`(in id integer)
BEGIN
	delete from albums where albums.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteArtist`(in id integer)
BEGIN
	delete from artists where artists.id = id;
end$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `addSong`(in song_name char(100),in song_path char(100),in album_id integer,in img_path char(100))
BEGIN
	insert into songs(name,path,album,img_path,count) values (song_name,song_path,album_id,img_path,0);
	select * from songs where songs.name = song_name;
end$$
DELIMITER ;
